<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k3s on shit i like</title>
    <link>https://blog.internetz.me/tags/k3s/</link>
    <description>Recent content in k3s on shit i like</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jun 2020 22:07:15 +0200</lastBuildDate>
    
	<atom:link href="https://blog.internetz.me/tags/k3s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Cert Manager for Letsencrypt Based Certificates With Nginx Ingress</title>
      <link>https://blog.internetz.me/posts/kubernetes-cert-manager-for-letsencrypt-based-certificates-with-nginx-ingress/</link>
      <pubDate>Sat, 13 Jun 2020 22:07:15 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-cert-manager-for-letsencrypt-based-certificates-with-nginx-ingress/</guid>
      <description>Cert Manager cert manager stores certificates in kubernetes secret store and we can configure the nginx-ingress to use these certificates.
cert-manager.yaml wget https://github.com/jetstack/cert-manager/releases/download/v0.15.1/cert-manager.yaml kubectl apply --validate=false -f cert-manager.yaml cert-manager.crds.yaml wget https://github.com/jetstack/cert-manager/releases/download/v0.15.1/cert-manager.crds.yaml kubectl apply --validate=false -f cert-manager.crds.yaml using the ClusterIssuer allows us to create certificates across all namespaces
letsencrypt-issuer.yaml apiVersion: cert-manager.io/v1alpha2 kind: ClusterIssuer metadata: name: letsencrypt-prod spec: acme: # The ACME server URL server: https://acme-v02.api.letsencrypt.org/directory # Email address used for ACME registration email: loeken@internetz.</description>
    </item>
    
    <item>
      <title>Kubernetes Namespaces</title>
      <link>https://blog.internetz.me/posts/kubernetes-namespaces/</link>
      <pubDate>Wed, 10 Jun 2020 11:54:27 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-namespaces/</guid>
      <description>Kubernetes namespaces Imagine two teams build similar apps running in the same cluster. in order to avoid duplicated names etc and in order to group resources namespaces can be used to logically separate things. You could also use it to separate staging/production You could also use it if you want to run multiple different production environments. Notes:
 ConfigMap and Secrets can only be used inside a namespace Namespaces can be used to limit access to namespaces Namespaces can be used to limit resources to namespaces ( cpu / mem / storage )  the default namespaces kubectl get namespaces NAME STATUS AGE default Active 5d14h kube-system Active 5d14h kube-public Active 5d14h kube-node-lease Active 5d14h kubernetes-dashboard Active 5d14h manage namespaces via command line kubectl create namespace mynamespace namespace/mynamespace created kubectl get namespaces NAME STATUS AGE default Active 5d14h kube-system Active 5d14h kube-public Active 5d14h kube-node-lease Active 5d14h kubernetes-dashboard Active 5d14h mynamespace Active 6s kubectl delete namespace mynamespace namespace &amp;#34;mynamespace&amp;#34; deleted to use namespaces in yaml markup simply add:</description>
    </item>
    
    <item>
      <title>Kubernetes Create Images in Azure Container Registry</title>
      <link>https://blog.internetz.me/posts/kubernetes-create-images-in-azure-container-registry/</link>
      <pubDate>Tue, 09 Jun 2020 12:55:48 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-create-images-in-azure-container-registry/</guid>
      <description>Creating a Container registry @ azure For this we&amp;rsquo;ll be using the azure container registry, alternatively you can use docker.io or google/aws based services.
I will name my registry demoregistry this guide will get you started
dependencies for azure registry: now we login via the azure cli
pacaur -S azure-cli az login az acr login --name demoregistry after the az login it will show
now let&amp;rsquo;s package up the node app</description>
    </item>
    
  </channel>
</rss>