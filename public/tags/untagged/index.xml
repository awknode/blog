<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on shit i like</title>
    <link>https://blog.internetz.me/tags/untagged/</link>
    <description>Recent content in untagged on shit i like</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jun 2020 09:50:23 +0200</lastBuildDate>
    
	<atom:link href="https://blog.internetz.me/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Create Images in Google Container Registry</title>
      <link>https://blog.internetz.me/posts/kubernetes-create-images-in-google-container-registry/</link>
      <pubDate>Fri, 12 Jun 2020 09:50:23 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-create-images-in-google-container-registry/</guid>
      <description>create a user and a project we ll be using the command line tool
pacaur -S google-cloud-sdk create a GCP service account; format of account is email address
SA_EMAIL=$(gcloud iam service-accounts --format=&amp;#39;value(email)&amp;#39; create k8s-gcr-auth-ro) create the json key file and associate it with the service account and save it in k8s-gcr-auth-ro.json
gcloud iam service-accounts keys create k8s-gcr-auth-ro.json --iam-account=$SA_EMAIL get the project id
PROJECT=$(gcloud config list core/project --format=&amp;#39;value(core.project)&amp;#39;) add the IAM policy binding for the defined project and service account</description>
    </item>
    
    <item>
      <title>Kubernetes Prometheus &amp; Grafana</title>
      <link>https://blog.internetz.me/posts/kubernetes-prometheus-and-grafana/</link>
      <pubDate>Thu, 11 Jun 2020 13:50:14 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-prometheus-and-grafana/</guid>
      <description>Kubernetes &amp;amp; Prometheus Prometheus by defaults pulls info from the hosts via an http endpoint by default this is the /metrics endpoint Data exposed on this /metrics endpoint needs to support the prometheus endpoint. Exporter is a standalone tool that gathers data and exposes it on the /metrics endpoint These exporters are also available via docker ( can be used as sidecar containers )
Promotheus Server  Data Retrieval Worker ( pulls metrics data) Time Series Database ( stores time series metrics data ) Api ( to access this stored data )  View Data  Prometheus Web Ui Grafana  Terms Targets: anything monitored Units: a subset of whats monitored</description>
    </item>
    
    <item>
      <title>Kubernetes Nodejs Postgresql Example With Nginx Ingress</title>
      <link>https://blog.internetz.me/posts/kubernetes-nodejs-postgresql-example-with-nginx-ingress/</link>
      <pubDate>Wed, 10 Jun 2020 12:27:37 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-nodejs-postgresql-example-with-nginx-ingress/</guid>
      <description>Kubernetes nodejs postgresl example with nginx ingress Download Image Markup
this would be an example to create an ingress that points to our internal node service
apiVersion: v1 kind: Ingress metadata: name: node-ingress spec: rules: - host: nodeexample.com http: paths: - test: serviceName: node-service servicePort: 1337 Let&amp;rsquo;s now combine this with our last two node and postgres deployments we wrote and create a new deployment for node/postgresql using the ingress with an internal service vs using the external service for the node app.</description>
    </item>
    
    <item>
      <title>Kubernetes Yaml Configuration Deployment and Service</title>
      <link>https://blog.internetz.me/posts/kubernetes-yaml-configuration-deployment-and-service/</link>
      <pubDate>Mon, 08 Jun 2020 13:31:40 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-yaml-configuration-deployment-and-service/</guid>
      <description>Deployment &amp;amp; Service Configuration Download Image Markup
Connecting Deployments with Services and Pods. Every configuration in k3s has 3 types
 metadata spec status ( created/managed by k8/3s - differntiating between desired and actual state )  the current status is held by the k3s cluster. the attributes of each of those 3 type have different options
example for deployment nginx-deployment.yaml apiVersion: apps/v1 # kind defines the type kind: Deployment # this is the metadata section metadata: name: nginx-deployment labels: # here we define a key/value pair this has to match the selector below services also reference this label app: nginx # this is the spec section spec: replicas: 3 selector: matchLabels: app: nginx # the following part is basically a configuration file inside a configuration file ( has its own metadata/spec sections ) # this is bascially the part of the configuration file that defines the pod  template: metadata: # same functionality as with the label above labels: app: nginx spec: containers: - name: nginx image: nginx:1.</description>
    </item>
    
    <item>
      <title>Kubernetes K3s Cluster Using K3sup Multi Master</title>
      <link>https://blog.internetz.me/posts/kubernetes-k3s-cluster-using-k3sup-multi-master/</link>
      <pubDate>Mon, 08 Jun 2020 13:01:40 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/kubernetes-k3s-cluster-using-k3sup-multi-master/</guid>
      <description>getting started information Terminology  kubernetes: Full blown container orchestration tool minicube: a 1 node kubernetes cluster running inside a vm ( good for local testing ) k3s a lightweight alternative to Kubernetes with a lot of unneeded code removed k3sup a small extra tool that helps you getting your k3s cluster going quickly  What is this docker/kuberentes stuff?  *{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34;</description>
    </item>
    
    <item>
      <title>Docker Nodejs Postgresql Example</title>
      <link>https://blog.internetz.me/posts/docker-nodejs-postgresql-example/</link>
      <pubDate>Sat, 06 Jun 2020 00:01:13 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/docker-nodejs-postgresql-example/</guid>
      <description>example postgresql/nodejs in two containers Download Image Markup
first we need to grab the postgresql image
docker pull postgres docker network ls NETWORK ID NAME DRIVER SCOPE 62e4019570d2 bridge bridge local c1aeefb374e7 host host local 608568a867c3 none null local docker network create testnetwork1 577e8e0c44c4ca0c0b1d855a70536e875bf77ec0010fdbfaf5db1d131ddabd69 docker network ls NETWORK ID NAME DRIVER SCOPE 62e4019570d2 bridge bridge local c1aeefb374e7 host host local 608568a867c3 none null local 577e8e0c44c4 testnetwork1 bridge local docker volumes: docker containers dont have persistent storage out of the box.</description>
    </item>
    
    <item>
      <title>Docker Create Images in a Private Self Hosted Registry</title>
      <link>https://blog.internetz.me/posts/docker-create-images-in-a-private-self-hosted-registry/</link>
      <pubDate>Fri, 05 Jun 2020 20:14:18 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/docker-create-images-in-a-private-self-hosted-registry/</guid>
      <description>first we need a docker registry where we can push our own application to in this demo we ll be using a self hosted ( unsecured ) docker registry running inside docker:
docker run -d -p 5000:5000 --restart=always --name registry registry:2 Unable to find image &amp;#39;registry:2&amp;#39; locally 2: Pulling from library/registry 486039affc0a: Pull complete ba51a3b098e6: Pull complete 8bb4c43d6c8e: Pull complete 6f5f453e5f2d: Pull complete 42bc10b72f42: Pull complete Digest: sha256:7d081088e4bfd632a88e3f3bcd9e007ef44a796fddfe3261407a3f9f04abe1e7 Status: Downloaded newer image for registry:2 8c6960c8d64962c1054f617e0b141bcdbb8f234ebf3b03c9c52411b3c3062a40 then we tell docker to login: just type any username you want and an emtpy password.</description>
    </item>
    
    <item>
      <title>Building Nginx Deb Package With Fpm - effin package manager</title>
      <link>https://blog.internetz.me/posts/building-custom-nginx-deb-package-with-fpm/</link>
      <pubDate>Sun, 17 May 2020 15:06:40 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/building-custom-nginx-deb-package-with-fpm/</guid>
      <description>nginx - creating a package with fpm installation of fpm our tool to build deb packages first we install the dependencies
apt-get -y install ruby ruby-dev rubygems build-essential gem install --no-document fpm verify installation
fpm --version dependencies for the modules we want to add
apt install libgd-dev libgeoip-dev using makefile for a simple build recipe:
NAME=nginx VERSION=1.14.2 #.PHONY: package package: cd /opt &amp;amp;&amp;amp; \ rm -rf nginx* &amp;amp;&amp;amp; \ rm -rf pcre-8.</description>
    </item>
    
    <item>
      <title>Arch Linux 2020 luks cryptsetup systemd-boot installation</title>
      <link>https://blog.internetz.me/posts/arch-linux-2020-luks-cryptsetup-systemd-boot_base-system-installation/</link>
      <pubDate>Sat, 02 May 2020 20:06:01 +0200</pubDate>
      
      <guid>https://blog.internetz.me/posts/arch-linux-2020-luks-cryptsetup-systemd-boot_base-system-installation/</guid>
      <description>the video the following video whos the whole installation below the video you&amp;rsquo;ll find the transcript
 *{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen title=&#34;test title&#34;  getting the iso you can grab the latest archlinux iso from https://www.archlinux.org/download/ download the iso and the matching signature to verify, if you are doing this from a arch you can use:
pacman-key -v archlinux-2020.05.01-x86_64.iso.sig ==&amp;gt; Checking archlinux-2020.05.01-x86_64.iso.sig... (detached) gpg: Signatur vom Fr 01 Mai 2020 07:33:57 CEST gpg: mittels RSA-Schlüssel 4AA4767BBC9C4B1D18AE28B77F2D434B9741E8AC gpg: Hinweis: Die &amp;quot;trustdb&amp;quot; ist nicht schreibbar gpg: Korrekte Signatur von &amp;quot;Pierre Schmitz &amp;lt;pierre@archlinux.</description>
    </item>
    
    <item>
      <title>New Blog</title>
      <link>https://blog.internetz.me/posts/new-blog/</link>
      <pubDate>Sun, 10 Nov 2019 00:10:50 +0100</pubDate>
      
      <guid>https://blog.internetz.me/posts/new-blog/</guid>
      <description>hello world, new blog created with http://gohugo.io/</description>
    </item>
    
  </channel>
</rss>